[tool.poetry]
name = "pdoctest"
version = "0.1.0"
description = ""
authors = ["emsl <@users.noreply.github.com>"]
readme = "README.md"
packages = [{include = "pdoctest", from = "src"}]


# declares name of CLI app and where the insertion point is
[tool.poetry.scripts]
pdoctest = "pdoctest.commands:app"


[tool.poetry.dependencies]
python = "^3.11"
typer = {extras = ["all"], version = "^0.9.0"}


[tool.poetry.group.dev.dependencies]
bandit = "^1.7.5"
ruff = "^0.0.286"
black = "^23.7.0"
isort = "^5.12.0"
pdoc = "^14.0.0"
pylint = "^2.17.5"
pyright = "^1.1.325"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
ruff-lsp = "^0.0.37"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.isort]
# compatibility with Black formatter
profile = "black"


# # example repo-wide pylint disablement section
# [tool.pylint]
# disable = [
#     "C0303",  # trailing-whitespace
#     "R0903",  # too-few-public-methods
# ]

[tool.pylint.format]
# line length to match Black formatter
max-line-length = "88"


[tool.pyright]
include = ["src"]
exclude = [".venv",
    "src/experimental",
    "src/typestubs",
  "**/__pycache__"
]
# utilizing the fact that we've set Poetry `virtualenv.in-project` to true
venvPath = "."
venv = ".venv"

typeCheckingMode = "basic"  # "off", "basic", "strict"
reportMissingImports = true
reportMissingTypeStubs = true

executionEnvironments = [
  { root = "src" }
]


[tool.pytest.ini_options]
# adds the following paths to pythonpath, specified relative to root dir
addopts = "--doctest-modules"
pythonpath = [
    "src",
]


[tool.ruff]
# Allow imports relative to the "src" and "test" directories.
src = ["src", "test"]

# warn, but recommend restructuring for unused `__init__.py` module imports
ignore-init-module-imports = true

select = ["ALL"]
ignore = [
    "D203",  # One blank line before class -- conflicts with "D211"
    "D213",  # Multiline docstrings start on second line -- conflicts with "D212"
]

[tool.ruff.extend-per-file-ignores]
# ignore these rules in the file defining CLI commands
"commands.py" =[
    "FBT001",  # No `bool` params -- used to specify CLI arguments with Typer module
    "FBT002",  # No `bool` param defaults -- CLI argument values in Typer module
    "UP007",   # No `Option[..]` Type-syntax -- used by Typer module
]
# ignore these rules in the file testing CLI commands
"test_commands.py" =[
    "FBT003",  # No `bool` in func calls -- functions being tested represent CLI args
]
# ignore these rules in the file testing CLI commands
"test_*.py" =[
    "S101",     # Use of `assert` -- intended in tests files
    "PLR2004",  # Magic Value used in comparison -- impractical rule in test files
]
